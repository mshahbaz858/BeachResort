{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\React JS\\\\Desktop\\\\react-project\\\\resort\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"C:\\\\Users\\\\React JS\\\\Desktop\\\\react-project\\\\resort\\\\src\\\\context.js\";\nimport React, { Component, Children } from 'react';\nimport items from './data';\nimport RoomsContainer from './components/RoomContainer';\nconst RoomContext = React.createContext();\n\nclass RoomProvider extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      rooms: [],\n      sortedRooms: [],\n      featuredRooms: [],\n      loading: true,\n      type: 'all',\n      capacity: 1,\n      price: 0,\n      minPrice: 0,\n      maxPrice: 0,\n      minSize: 0,\n      maxSize: 0,\n      breakfast: false,\n      pets: false\n    };\n\n    this.getRoom = slug => {\n      let tempRooms = [...this.state.rooms];\n      const room = tempRooms.find(room => room.slug === slug);\n      return room;\n    };\n\n    this.handleChange = event => {\n      const target = event.target;\n      const value = target.type === 'checkbox' ? target.checked : target.value;\n      const name = event.target.name;\n      this.setState({\n        [name]: value\n      }, this.filterRooms);\n    };\n\n    this.filterRooms = () => {\n      // here we used let so we can override the value of it\n      let _this$state = this.state,\n          rooms = _this$state.rooms,\n          type = _this$state.type,\n          capacity = _this$state.capacity,\n          price = _this$state.price,\n          minSize = _this$state.minSize,\n          maxSize = _this$state.maxSize,\n          breakfast = _this$state.breakfast,\n          pets = _this$state.pets; //all the value \n\n      let tempRooms = [...rooms]; //transform value\n\n      capacity = parseInt(capacity);\n      price = parseInt(price); //filter by ('min and max Size')\n\n      tempRooms = tempRooms.filter(room => room.size >= minSize && room.size <= maxSize); //filter by ('breakfast')\n\n      if (breakfast) {\n        tempRooms = tempRooms.filter(room => room.breakfast === true);\n      } //filter by ('pets')\n\n\n      if (pets) {\n        tempRooms = tempRooms.filter(room => room.pets === true);\n      } //filter by ('type') \n\n\n      if (type !== 'all') {\n        tempRooms = tempRooms.filter(room => room.type === type);\n      } // filter by ('capacity')\n\n\n      if (capacity !== 1) {\n        tempRooms = tempRooms.filter(room => room.capacity >= capacity);\n      } //filter by price \n\n\n      tempRooms = tempRooms.filter(room => {\n        return room.price <= price;\n      }); //change state\n\n      this.setState({\n        sortedRooms: tempRooms\n      });\n    };\n  }\n\n  componentDidMount() {\n    let rooms = this.formatData(items);\n    let featuredRooms = rooms.filter(room => room.featured === true);\n    let maxPrice = Math.max(...rooms.map(item => item.price));\n    let maxSize = Math.max(...rooms.map(item => item.size));\n    this.setState({\n      rooms,\n      featuredRooms,\n      sortedRooms: rooms,\n      loading: false,\n      price: maxPrice,\n      maxPrice,\n      maxSize\n    });\n  }\n\n  formatData(items) {\n    console.log(items);\n    let tempItems = items.map(item => {\n      let id = item.sys.id;\n      let images = item.fields.images.map(image => image.fields.file.url);\n\n      let room = _objectSpread({}, item.fields, {\n        id,\n        images\n      }); // console.log(room);\n\n\n      return room;\n    });\n    return tempItems;\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, React.createElement(RoomContext.Provider, {\n      value: _objectSpread({}, this.state, {\n        getRoom: this.getRoom,\n        handleChange: this.handleChange\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, this.props.children));\n  }\n\n}\n\nconst RoomConsumer = RoomContext.Consumer;\nexport function withRoomConsumer(Component) {\n  return function ConsumerWrapper(props) {\n    return React.createElement(RoomConsumer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, value => React.createElement(Component, Object.assign({}, props, {\n      context: value,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    })));\n  };\n}\nexport { RoomProvider, RoomConsumer, RoomContext };","map":{"version":3,"sources":["C:/Users/React JS/Desktop/react-project/resort/src/context.js"],"names":["React","Component","Children","items","RoomsContainer","RoomContext","createContext","RoomProvider","state","rooms","sortedRooms","featuredRooms","loading","type","capacity","price","minPrice","maxPrice","minSize","maxSize","breakfast","pets","getRoom","slug","tempRooms","room","find","handleChange","event","target","value","checked","name","setState","filterRooms","parseInt","filter","size","componentDidMount","formatData","featured","Math","max","map","item","console","log","tempItems","id","sys","images","fields","image","file","url","render","props","children","RoomConsumer","Consumer","withRoomConsumer","ConsumerWrapper"],"mappings":"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","sourcesContent":["import React, { Component, Children } from 'react'\r\nimport items from './data'\r\nimport RoomsContainer from './components/RoomContainer';\r\nconst RoomContext = React.createContext();\r\nclass RoomProvider extends Component {\r\n    state = {\r\n        rooms: [],\r\n        sortedRooms: [],\r\n        featuredRooms: [],\r\n        loading: true,\r\n        type: 'all',\r\n        capacity: 1,\r\n        price: 0,\r\n        minPrice: 0,\r\n        maxPrice: 0,\r\n        minSize: 0,\r\n        maxSize: 0,\r\n        breakfast: false,\r\n        pets: false\r\n    };\r\n\r\n    componentDidMount() {\r\n        let rooms = this.formatData(items)\r\n        let featuredRooms = rooms.filter(room => room.featured === true);\r\n\r\n        let maxPrice = Math.max(...rooms.map(item => item.price));\r\n        let maxSize = Math.max(...rooms.map(item => item.size));\r\n\r\n        this.setState({\r\n            rooms,\r\n            featuredRooms,\r\n            sortedRooms: rooms,\r\n            loading: false,\r\n            price: maxPrice,\r\n            maxPrice,\r\n            maxSize\r\n        });\r\n    }\r\n    formatData(items) {\r\n        console.log(items);\r\n        \r\n        let tempItems = items.map(item => {\r\n            let id = item.sys.id;\r\n            let images = item.fields.images.map(image => image.fields.file.url);\r\n            let room = { ...item.fields, id, images }\r\n            // console.log(room);\r\n            \r\n            return room;\r\n        });\r\n        return tempItems;\r\n\r\n    }\r\n\r\n    getRoom = (slug) => {\r\n        let tempRooms = [...this.state.rooms];\r\n        const room = tempRooms.find(room => room.slug === slug);\r\n        return room;\r\n    };\r\n\r\n    handleChange = event => {\r\n        const target = event.target;\r\n        const value = target.type === 'checkbox' ? target.checked : target.value;\r\n        const name = event.target.name\r\n        this.setState(\r\n            {\r\n                \r\n                [name]: value\r\n            },\r\n            this.filterRooms\r\n        );\r\n    }\r\n    filterRooms = () => {\r\n        // here we used let so we can override the value of it\r\n        let {\r\n            rooms,\r\n            type,\r\n            capacity,\r\n            price,\r\n            minSize,\r\n            maxSize,\r\n            breakfast,\r\n            pets\r\n        } = this.state;\r\n        //all the value \r\n        let tempRooms = [...rooms];\r\n\r\n        //transform value\r\n        capacity = parseInt(capacity);\r\n        price=parseInt(price);\r\n\r\n        //filter by ('min and max Size')\r\n        tempRooms= tempRooms.filter(room=> room.size\r\n             >= minSize && room.size<=maxSize)\r\n\r\n        //filter by ('breakfast')\r\n        if(breakfast){\r\n            tempRooms=tempRooms.filter(room=> room.breakfast===true)\r\n        }\r\n\r\n        //filter by ('pets')\r\n        if(pets){\r\n            tempRooms=tempRooms.filter(room=> room.pets===true)\r\n        }\r\n\r\n        //filter by ('type') \r\n        if (type !== 'all') {\r\n            tempRooms = tempRooms.filter(room => room.type === type);\r\n        }\r\n\r\n        // filter by ('capacity')\r\n        if (capacity !== 1){\r\n            tempRooms = tempRooms.filter(room=> room.capacity>=capacity);\r\n        }\r\n        //filter by price \r\n        tempRooms = tempRooms.filter(room=>{\r\n           return room.price <= price\r\n        });\r\n\r\n        //change state\r\n        this.setState({\r\n            sortedRooms: tempRooms\r\n        });\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <RoomContext.Provider\r\n                    value={{\r\n                        ...this.state,\r\n                        getRoom: this.getRoom,\r\n                        handleChange: this.handleChange\r\n                    }}\r\n                >\r\n                    {this.props.children}\r\n                </RoomContext.Provider>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nconst RoomConsumer = RoomContext.Consumer;\r\n\r\nexport function withRoomConsumer(Component) {\r\n    return function ConsumerWrapper(props) {\r\n        return <RoomConsumer>\r\n            {\r\n                value =>\r\n                    <Component {...props}\r\n                        context={value} />\r\n            }\r\n        </RoomConsumer>\r\n    }\r\n\r\n}\r\nexport { RoomProvider, RoomConsumer, RoomContext };"]},"metadata":{},"sourceType":"module"}